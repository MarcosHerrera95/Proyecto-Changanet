// prisma/schema.prisma
// FUNCIÓN: Define la estructura de la base de datos relacional de Changánet.
// RELACIÓN PRD: Sección 6 (Entorno Operativo) y Sección 7 (Requerimientos Funcionales).
// TARJETA BACKEND: N/A (Base de datos para todas las tarjetas).
// SPRINT: Sprint 0 - Fase 2 (UX Research) - "Pruebas de concepto implementadas, garantizando que las tecnologías elegidas sean viables."

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// MODELO: usuarios
// FUNCIÓN: Almacena todos los usuarios del sistema (clientes y profesionales).
// RELACIÓN PRD: REQ-01 (Registro), REQ-02 (Login), REQ-03 (Verificación de email).
// TARJETA BACKEND: Tarjeta 1: [Backend] Implementar API de Registro y Login.
// SPRINT: Sprint 1 (Primera Entrega) - "Implementación del producto de software".
model usuarios {
  id              String    @id @default(uuid()) // Identificador único del usuario
  email           String    @unique // REQ-04: Email único para evitar duplicados
  hash_contraseña String    // REQ-03: Contraseña hasheada para seguridad
  nombre          String    // Nombre del usuario
  teléfono        String?   // Teléfono opcional
  rol             Rol       @default(cliente) // REQ-01: Define si es 'cliente' o 'profesional'
  está_verificado Boolean   @default(false) // REQ-03: Indica si el email ha sido verificado
  creado_en       DateTime  @default(now()) // Fecha de creación del usuario
  actualizado_en  DateTime? // Fecha de última actualización

  // Relaciones
  perfil_profesional perfiles_profesionales? // 1:1 con perfiles_profesionales (solo si rol='profesional')
  servicios_como_cliente servicios[] @relation("ServicioCliente") // 1:N: Un cliente puede tener muchos servicios
  servicios_como_profesional servicios[] @relation("ServicioProfesional") // 1:N: Un profesional puede realizar muchos servicios
  reseñas_escritas reseñas[] // 1:N: Un cliente puede escribir muchas reseñas
  mensajes_enviados mensajes[] @relation("MensajeRemitente") // 1:N: Un usuario puede enviar muchos mensajes
  mensajes_recibidos mensajes[] @relation("MensajeDestinatario") // 1:N: Un usuario puede recibir muchos mensajes
  disponibilidad disponibilidad[] // 1:N: Un profesional puede tener muchos bloques de disponibilidad
  notificaciones notificaciones[] // 1:N: Un usuario puede recibir muchas notificaciones
}

// MODELO: perfiles_profesionales
// FUNCIÓN: Almacena la información específica de los profesionales.
// RELACIÓN PRD: REQ-06 (Foto), REQ-07 (Especialidad), REQ-08 (Experiencia), REQ-09 (Zona), REQ-10 (Tarifas).
// TARJETA BACKEND: Tarjeta 2: [Backend] Implementar API para Gestión de Perfiles Profesionales.
// SPRINT: Sprint 1 (Primera Entrega) - "Implementación del producto de software".
model perfiles_profesionales {
  usuario_id       String   @id @default(uuid()) // PK y FK que enlaza con usuarios.id
  usuario          usuarios @relation(fields: [usuario_id], references: [id])

  especialidad     String   // REQ-07: Oficio del profesional (plomero, electricista, etc.)
  años_experiencia Int?    // REQ-08: Años de experiencia en el oficio
  zona_cobertura   String   // REQ-09: Área geográfica donde trabaja
  tarifa_hora      Float    // REQ-10: Precio por hora de trabajo
  descripción      String?  // Descripción personalizada del profesional
  url_foto_perfil  String?  // REQ-06: URL de la foto de perfil
  estado_verificación EstadoVerificación @default(pendiente) // REQ-37: Estado de la verificación de identidad
  verificado_en    DateTime? // Fecha en que se verificó la identidad
}

// MODELO: servicios
// FUNCIÓN: Representa un servicio contratado, conectando a un cliente con un profesional.
// RELACIÓN PRD: REQ-29 (Agendamiento), RB-02 (Solo reseñas si el servicio está completado).
// TARJETA BACKEND: Tarjeta 6: [Backend] Implementar API de Gestión de Disponibilidad (parte de agendamiento).
// SPRINT: Sprint 2 (Segunda Entrega) - "Consolidar y mejorar el producto".
model servicios {
  id             String   @id @default(uuid()) // Identificador único del servicio
  cliente_id     String   // FK que enlaza con el cliente (usuarios.id)
  cliente        usuarios @relation("ServicioCliente", fields: [cliente_id], references: [id])
  profesional_id String   // FK que enlaza con el profesional (usuarios.id)
  profesional    usuarios @relation("ServicioProfesional", fields: [profesional_id], references: [id])
  descripción    String   // Descripción del trabajo a realizar
  estado         EstadoServicio @default(pendiente) // RB-02: Estado del servicio (pendiente, agendado, completado, cancelado)
  fecha_agendada DateTime? // REQ-29: Fecha y hora en que se realizará el servicio
  creado_en      DateTime @default(now()) // Fecha de creación del servicio
  completado_en  DateTime? // Fecha en que se marcó el servicio como completado
  reseña         reseñas?  // 1:1: Un servicio puede tener una reseña (opcional)
}

// MODELO: reseñas
// FUNCIÓN: Almacena las calificaciones y comentarios de los clientes tras un servicio.
// RELACIÓN PRD: REQ-21 (Calificación), REQ-22 (Comentario), REQ-23 (Foto), REQ-24 (Calificación promedio), REQ-25 (Solo tras servicio completado).
// TARJETA BACKEND: Tarjeta 5: [Backend] Implementar API de Reseñas Verificadas.
// SPRINT: Sprint 2 (Segunda Entrega) - "Consolidar y mejorar el producto".
model reseñas {
  id            String   @id @default(uuid()) // Identificador único de la reseña
  servicio_id   String   @unique // REQ-25: Campo único para relación 1:1 con servicios
  servicio      servicios @relation(fields: [servicio_id], references: [id])
  cliente_id    String   // FK que enlaza con el cliente que escribió la reseña
  cliente       usuarios @relation(fields: [cliente_id], references: [id]) // Relación con el cliente
  calificación  Int      // REQ-21: Puntuación de 1 a 5 estrellas
  comentario    String?  // REQ-22: Comentario escrito por el cliente
  url_foto      String?  // REQ-23: URL de la foto adjunta al servicio
  creado_en     DateTime @default(now()) // Fecha de creación de la reseña
}

// MODELO: mensajes
// FUNCIÓN: Almacena el historial de comunicación entre usuarios (el chat).
// RELACIÓN PRD: REQ-16 (Chat interno), REQ-17 (Mensajes de texto), REQ-18 (Imágenes), REQ-20 (Historial).
// TARJETA BACKEND: Tarjeta 4: [Backend] Implementar API de Chat en Tiempo Real.
// SPRINT: Sprint 1 (Primera Entrega) - "Implementación del producto de software".
model mensajes {
  id             String   @id @default(uuid()) // Identificador único del mensaje
  remitente_id   String   // FK que enlaza con el usuario remitente
  remitente      usuarios @relation("MensajeRemitente", fields: [remitente_id], references: [id])
  destinatario_id String  // FK que enlaza con el usuario destinatario
  destinatario   usuarios @relation("MensajeDestinatario", fields: [destinatario_id], references: [id])
  contenido      String   // REQ-17: Texto del mensaje
  url_imagen     String?  // REQ-18: URL de la imagen adjunta
  está_leído     Boolean  @default(false) // REQ-20: Indica si el mensaje ha sido leído
  creado_en      DateTime @default(now()) // Fecha de creación del mensaje
}

// MODELO: disponibilidad
// FUNCIÓN: Gestiona los horarios en los que un profesional está disponible para trabajar.
// RELACIÓN PRD: REQ-26 (Calendario), REQ-27 (Horarios), REQ-28 (Visibilidad).
// TARJETA BACKEND: Tarjeta 6: [Backend] Implementar API de Gestión de Disponibilidad.
// SPRINT: Sprint 2 (Segunda Entrega) - "Consolidar y mejorar el producto".
model disponibilidad {
  id            String   @id @default(uuid()) // Identificador único del bloque de disponibilidad
  profesional_id String  // FK que enlaza con el profesional
  profesional   usuarios @relation(fields: [profesional_id], references: [id])
  fecha         DateTime // REQ-27: Fecha del bloque de disponibilidad
  hora_inicio   DateTime // REQ-27: Hora de inicio del bloque
  hora_fin      DateTime // REQ-27: Hora de fin del bloque
  está_disponible Boolean @default(true) // Indica si el bloque está activo
}

// MODELO: notificaciones
// FUNCIÓN: Almacena las alertas automáticas que recibe el usuario.
// RELACIÓN PRD: REQ-19 (Notificaciones automáticas).
// TARJETA BACKEND: Tarjeta 4: [Backend] Implementar API de Chat en Tiempo Real (parte de notificaciones).
// SPRINT: Sprint 1 (Primera Entrega) - "Implementación del producto de software".
model notificaciones {
  id         String   @id @default(uuid()) // Identificador único de la notificación
  usuario_id String   // FK que enlaza con el usuario receptor
  usuario    usuarios @relation(fields: [usuario_id], references: [id])
  tipo       TipoNotificación // Tipo de notificación (nuevo_mensaje, nueva_cotización, etc.)
  mensaje    String   // Contenido de la notificación
  está_leído Boolean  @default(false) // Indica si la notificación ha sido leída
  creado_en  DateTime @default(now()) // Fecha de creación de la notificación
}

// ENUM: Rol
// FUNCIÓN: Define los tipos de usuario en el sistema.
// RELACIÓN PRD: REQ-01 (Registro con selección de tipo de cuenta).
enum Rol {
  cliente
  profesional
}

// ENUM: EstadoVerificación
// FUNCIÓN: Define los estados del proceso de verificación de identidad.
// RELACIÓN PRD: REQ-37 (Insignia "Verificado").
enum EstadoVerificación {
  pendiente
  verificado
  rechazado
}

// ENUM: EstadoServicio
// FUNCIÓN: Define los estados por los que pasa un servicio.
// RELACIÓN PRD: RB-02 (Las reseñas solo se pueden dejar tras la finalización del servicio).
enum EstadoServicio {
  pendiente
  agendado
  completado
  cancelado
}

// ENUM: TipoNotificación
// FUNCIÓN: Define los tipos de notificaciones automáticas del sistema.
// RELACIÓN PRD: REQ-19 (Notificaciones por actividad).
enum TipoNotificación {
  nuevo_mensaje
  nueva_cotización
  servicio_agendado
  reseña_recibida
  pago_liberado
}